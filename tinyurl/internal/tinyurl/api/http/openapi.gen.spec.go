// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVTW/bSAz9KwPuHgXL+TgsdMu2QGHAB8OND0WQw0SipAmk4XRI2TEM/fdiRnFs2Q6C",
	"FL30pITg8D0+PtI7yKl1ZNEKQ7YDzmtsdfxztZyHj/Pk0IvBGMQXZ7wWQ/arFgyRAjn3xoUQZLCy5kWJ",
	"aZFFt04ZqxhzsgWrkrySGtWhgiq0oKIyhrkmL2ixUKvlfAIJyNYhZGCsYIUe+gTIm8pY3ax8cw58X6Pa",
	"J4QSkAC+6NY1oUgt4jhL081mM6mIqgYnObUHEBZvbBUw3mi8CzIiehGloVw3NbFkt9Oraap/XC/W/52D",
	"9Ql4/NkZjwVkD2PkcbOPb2/p6RlzgT48Nrakc4p3i1mUOveoxdhKaVsoj+INrsO/I/ochTYS6d8buw1B",
	"dbeYQQJr9DyUvJpMJ9M4AIdWOwMZ3MRQAk5LHX2RRrxoCEcs4RtsE+c8KyCDBbF8GXKGvpHlfyq2ITMn",
	"K2jjI+1cY/L4LH3mAL/35F/sRSWkno7KQgIl+VYLZNB586E1PvbCIVt8hzHAjiwPQl1Pp5+S+V+PJWTw",
	"T3q4DenrYUiD6SPkidbL+ZFs3OU5Mpdd02yDWrefJDCec4vMusJh5Ptlm9m1bkyckHoV85KMF7QaEz+u",
	"w11ghUV8yV3bar+FDAbbKq0sbk7WPySmO266qg/0Krzg/G8o35uuitvidYuCniF7uHhbmq56M+fpoTEh",
	"KywcJGB1Gxsd6o6nnxwJedDr3Sv0eGKWm+n1uaOXWBiPeTwoQpHeybGtURexsR3MaRjshY0cdsG/VlNC",
	"cMz2g6Xoo5Nu/7STAilLokrqbPF7JhqXGLtneWj2XLdYi9Gv957owj1555cE+sf+VwAAAP//a/hSKbAH",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
